{"version":3,"file":"component---src-pages-index-js-0f2bf7e69e994624583d.js","mappings":"0LAyEA,IAjEiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACZC,GAAcC,EAAAA,EAAAA,GAAOF,EAAKG,YAAYC,eAItCC,EAAOL,EAAKG,YAAYE,KAE9B,OACE,uBAAKC,UAAU,uBACb,gBAAC,EAAAC,KAAD,CACEC,GAAIR,EAAKS,OAAOC,QAChBJ,UAAU,uHACVK,MAAO,CACLC,gBAAgB,OAAQX,EAAT,IACfY,mBAAoB,iBAEtBC,MAAOd,EAAKG,YAAYW,QAE1B,uBAAKR,UAAU,wMACb,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKS,OAAOC,SACpB,uBAAKJ,UAAU,QACb,uBAAKA,UAAU,+CACZN,EAAKG,YAAYW,OAEpB,qBAAGR,UAAU,kCAAkCN,EAAKe,WAGxD,uBAAKT,UAAU,iBACb,uBAAKA,UAAU,qBACb,qBAAGA,UAAU,cAAcN,EAAKG,YAAYa,OAE9C,uBAAKV,UAAU,6BACH,OAATD,GACCA,EAAKY,KAAI,SAAAC,GACP,OACE,gBAAC,IAAD,CAASC,IAAQ,IAAUD,GAAf,SAA4BlB,EAAKG,YAAYiB,KAAQF,IAAKA,a,wEC4BxF,UA/DkB,SAAC,GAKZ,IAHkBG,EAGnB,EAJJC,KACEC,kBAAqBF,MAEvBG,EACI,EADJA,SAEMC,EAAQJ,EACXK,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKzB,YAAYa,QACvCC,KAAI,SAAAU,GAAI,OAAI,gBAAC,IAAD,CAAUR,IAAKQ,EAAKC,KAAKC,GAAI7B,KAAM2B,EAAKC,UAEvD,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEE,SAAU,CAAC,aAAc,aAAc,SAAU,aAAc,YAAa,cAC5EhB,MAAM,OACNiB,KAAMP,EAASQ,WAGjB,2BAAS1B,UAAU,UACjB,sBAAIA,UAAU,sBAAd,SAEA,uBAAKA,UAAU,uBAAuBmB","sources":["webpack://milenology-dot-com/./src/components/post-link.js","webpack://milenology-dot-com/./src/pages/index.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { getSrc } from 'gatsby-plugin-image';\nimport { kebabCase } from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport TagLink from './tag-link';\n\nconst PostLink = ({ post }) => {\n  const featuredSrc = getSrc(post.frontmatter.featuredImage);\n  // const featuredSrcSet = featuredImgFluid.srcSet;\n  // const imageLink = featuredSrcSet.substring(0, featuredSrcSet.indexOf(' 200w'));\n\n  const tags = post.frontmatter.tags;\n\n  return (\n    <div className=\"w-full lg:flex py-4\">\n      <Link\n        to={post.fields.urlPath}\n        className=\"block h-56 lg:w-64 lg:h-auto flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden\"\n        style={{\n          backgroundImage: `url(${featuredSrc})`,\n          backgroundPosition: 'center center'\n        }}\n        title={post.frontmatter.title}\n      />\n      <div className=\"flex-1 border-r border-b border-l border-gray-800 lg:border-l-0 lg:border-t lg:border-gray-700 rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal bg-gray-800\">\n        <Link to={post.fields.urlPath}>\n          <div className=\"mb-8\">\n            <div className=\"text-white font-bold text-xl mb-2 text-left\">\n              {post.frontmatter.title}\n            </div>\n            <p className=\"text-white text-base text-left\">{post.excerpt}</p>\n          </div>\n        </Link>\n        <div className=\"flex flex-row\">\n          <div className=\"flex pr-2 text-sm\">\n            <p className=\"text-white\">{post.frontmatter.date}</p>\n          </div>\n          <div className=\"flex-1 ml-auto text-right\">\n            {tags !== null &&\n              tags.map(tag => {\n                return (\n                  <TagLink key={`${kebabCase(tag)}-post-${post.frontmatter.slug}`} tag={tag} />\n                );\n              })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nPostLink.propTypes = {\n  post: PropTypes.shape({\n    excerpt: PropTypes.string,\n    fields: PropTypes.shape({\n      urlPath: PropTypes.string\n    }),\n    frontmatter: PropTypes.shape({\n      slug: PropTypes.string,\n      title: PropTypes.string,\n      tags: PropTypes.arrayOf(PropTypes.string),\n      date: PropTypes.string,\n      featuredImage: PropTypes.shape({\n        childImageSharp: PropTypes.shape({\n          gatsbyImageData: PropTypes.any\n        })\n      })\n    })\n  })\n};\n\nexport default PostLink;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Layout from '../components/layout';\nimport PostLink from '../components/post-link';\nimport SEO from '../components/seo';\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges }\n  },\n  location\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />);\n\n  return (\n    <Layout>\n      <SEO\n        keywords={['terencelim', 'technology', 'travel', 'life hacks', 'microsoft', 'salesforce']}\n        title=\"Home\"\n        path={location.pathname}\n      />\n\n      <section className=\"flex-1\">\n        <h2 className=\"text-2xl font-bold\">Posts</h2>\n\n        <div className=\"flex-1 items-center\">{Posts}</div>\n      </section>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          fields {\n            urlPath\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            slug\n            title\n            tags\n            featuredImage {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nIndexPage.propTypes = {\n  location: PropTypes.object,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array\n    })\n  })\n};\n\nexport default IndexPage;\n"],"names":["post","featuredSrc","getSrc","frontmatter","featuredImage","tags","className","Link","to","fields","urlPath","style","backgroundImage","backgroundPosition","title","excerpt","date","map","tag","key","slug","edges","data","allMarkdownRemark","location","Posts","filter","edge","node","id","keywords","path","pathname"],"sourceRoot":""}